{"ast":null,"code":"import axios from 'axios';\n\nvar axiosWithAuth = function axiosWithAuth() {\n  return axios.create();\n};\n\nexport var FETCH_PATIENTS = 'FETCH_PATIENTS';\nexport var FETCH_PATIENTS_SUCCESS = 'FETCH_PATIENTS_SUCCESS';\nexport var REQUEST_ERROR = 'REQUEST_ERROR';\nexport var SAVE_PATIENT = 'SAVE_PATIENT';\nexport var SAVE_PATIENT_SUCCESS = 'SAVE_PATIENT_SUCCESS';\nexport var UPDATE_PATIENT = 'UPDATE_PATIENT';\nexport var UPDATE_PATIENT_SUCCESS = 'UPDATE_PATIENT_SUCCESS';\nexport var DELETE_PATIENT = 'DELETE_PATIENT';\nexport var DELETE_PATIENT_SUCCESS = 'DELETE_PATIENT_SUCCESS';\nexport var LOGIN = 'LOGIN';\nexport var LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport var LOAD_TOKEN = 'LOAD_TOKEN';\nexport var LOG_OUT = 'LOG_OUT';\nexport var logOut = function logOut() {\n  return {\n    type: LOG_OUT\n  };\n};\nexport var loadToken = function loadToken(t) {\n  axiosWithAuth = function axiosWithAuth() {\n    return axios.create({\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: t\n      }\n    });\n  };\n\n  return {\n    type: LOAD_TOKEN,\n    payload: t\n  };\n};\nexport var login = function login(credentials) {\n  return function (dispatch) {\n    dispatch({\n      type: LOGIN\n    });\n    return axios.post('http://localhost:5000/api/login', credentials).then(function (res) {\n      localStorage.setItem('token', res.data.payload);\n\n      axiosWithAuth = function axiosWithAuth() {\n        return axios.create({\n          headers: {\n            'Content-Type': 'application/json',\n            authorization: \"\".concat(res.data.payload)\n          }\n        });\n      };\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data.payload\n      });\n    });\n  };\n};\nexport var fetchPatients = function fetchPatients() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_PATIENTS\n    });\n    return axiosWithAuth().get('http://localhost:5000/api/patients').then(function (_ref) {\n      var data = _ref.data;\n      return dispatch({\n        type: FETCH_PATIENTS_SUCCESS,\n        payload: data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: REQUEST_ERROR,\n        payload: err\n      });\n    });\n  };\n};\nexport var savePatient = function savePatient(patient) {\n  return function (dispatch) {\n    dispatch({\n      type: SAVE_PATIENT\n    });\n    return axiosWithAuth().post('http://localhost:5000/api/patients', patient).then(function (_ref2) {\n      var data = _ref2.data;\n      return dispatch({\n        type: SAVE_PATIENT_SUCCESS,\n        payload: data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: REQUEST_ERROR,\n        payload: err\n      });\n    });\n  };\n};\nexport var updatePatient = function updatePatient(patient) {\n  return function (dispatch) {\n    dispatch({\n      type: UPDATE_PATIENT\n    });\n    return axiosWithAuth().put(\"http://localhost:5000/api/patients/\".concat(patient.id), patient).then(function (_ref3) {\n      var data = _ref3.data;\n      return dispatch({\n        type: UPDATE_PATIENT_SUCCESS,\n        payload: data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: REQUEST_ERROR,\n        payload: err\n      });\n    });\n  };\n};\nexport var deletePatient = function deletePatient(patient) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETE_PATIENT\n    });\n    return axiosWithAuth().delete(\"http://localhost:5000/api/patients/\".concat(patient.id)).then(function (_ref4) {\n      var data = _ref4.data;\n      return dispatch({\n        type: DELETE_PATIENT_SUCCESS,\n        payload: data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: REQUEST_ERROR,\n        payload: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/bryant/repositories/web20/build_weeks/build_2/notes/redux-vaccines/vaccines/src/actions/index.js"],"names":["axios","axiosWithAuth","create","FETCH_PATIENTS","FETCH_PATIENTS_SUCCESS","REQUEST_ERROR","SAVE_PATIENT","SAVE_PATIENT_SUCCESS","UPDATE_PATIENT","UPDATE_PATIENT_SUCCESS","DELETE_PATIENT","DELETE_PATIENT_SUCCESS","LOGIN","LOGIN_SUCCESS","LOAD_TOKEN","LOG_OUT","logOut","type","loadToken","t","headers","authorization","payload","login","credentials","dispatch","post","then","res","localStorage","setItem","data","fetchPatients","get","catch","err","savePatient","patient","updatePatient","put","id","deletePatient","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nlet axiosWithAuth = () => axios.create();\n\nexport const FETCH_PATIENTS = 'FETCH_PATIENTS';\nexport const FETCH_PATIENTS_SUCCESS = 'FETCH_PATIENTS_SUCCESS';\nexport const REQUEST_ERROR = 'REQUEST_ERROR';\nexport const SAVE_PATIENT = 'SAVE_PATIENT';\nexport const SAVE_PATIENT_SUCCESS = 'SAVE_PATIENT_SUCCESS';\nexport const UPDATE_PATIENT = 'UPDATE_PATIENT';\nexport const UPDATE_PATIENT_SUCCESS = 'UPDATE_PATIENT_SUCCESS';\nexport const DELETE_PATIENT = 'DELETE_PATIENT';\nexport const DELETE_PATIENT_SUCCESS = 'DELETE_PATIENT_SUCCESS';\nexport const LOGIN = 'LOGIN';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOAD_TOKEN = 'LOAD_TOKEN';\nexport const LOG_OUT = 'LOG_OUT';\n\nexport const logOut = () => ({\n  type: LOG_OUT\n});\n\nexport const loadToken = t => {\n  axiosWithAuth = () =>\n    axios.create({\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: t\n      }\n    });\n  return {\n    type: LOAD_TOKEN,\n    payload: t\n  };\n};\n\nexport const login = credentials => dispatch => {\n  dispatch({ type: LOGIN });\n  return axios\n    .post('http://localhost:5000/api/login', credentials)\n    .then(res => {\n      localStorage.setItem('token', res.data.payload);\n      axiosWithAuth = () =>\n        axios.create({\n          headers: {\n            'Content-Type': 'application/json',\n            authorization: `${res.data.payload}`\n          }\n        });\n      dispatch({ type: LOGIN_SUCCESS, payload: res.data.payload });\n    });\n};\n\nexport const fetchPatients = () => dispatch => {\n  dispatch({ type: FETCH_PATIENTS });\n  return axiosWithAuth()\n    .get('http://localhost:5000/api/patients')\n    .then(({ data }) =>\n      dispatch({ type: FETCH_PATIENTS_SUCCESS, payload: data })\n    )\n    .catch(err => dispatch({ type: REQUEST_ERROR, payload: err }));\n};\n\nexport const savePatient = patient => dispatch => {\n  dispatch({ type: SAVE_PATIENT });\n  return axiosWithAuth()\n    .post('http://localhost:5000/api/patients', patient)\n    .then(({ data }) => dispatch({ type: SAVE_PATIENT_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ERROR, payload: err }));\n};\n\nexport const updatePatient = patient => dispatch => {\n  dispatch({ type: UPDATE_PATIENT });\n  return axiosWithAuth()\n    .put(`http://localhost:5000/api/patients/${patient.id}`, patient)\n    .then(({ data }) =>\n      dispatch({ type: UPDATE_PATIENT_SUCCESS, payload: data })\n    )\n    .catch(err => dispatch({ type: REQUEST_ERROR, payload: err }));\n};\n\nexport const deletePatient = patient => dispatch => {\n  dispatch({ type: DELETE_PATIENT });\n  return axiosWithAuth()\n    .delete(`http://localhost:5000/api/patients/${patient.id}`)\n    .then(({ data }) =>\n      dispatch({ type: DELETE_PATIENT_SUCCESS, payload: data })\n    )\n    .catch(err => dispatch({ type: REQUEST_ERROR, payload: err }));\n};\n"]},"metadata":{},"sourceType":"module"}