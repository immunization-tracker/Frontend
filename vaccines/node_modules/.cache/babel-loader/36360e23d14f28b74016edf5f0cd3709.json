{"ast":null,"code":"import _objectSpread from \"/Users/bryant/repositories/web20/build_weeks/build_2/notes/redux-vaccines/vaccines/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/bryant/repositories/web20/build_weeks/build_2/notes/redux-vaccines/vaccines/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/bryant/repositories/web20/build_weeks/build_2/notes/redux-vaccines/vaccines/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/bryant/repositories/web20/build_weeks/build_2/notes/redux-vaccines/vaccines/src/App.js\";\nimport { hot } from 'react-hot-loader/root';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport LoginForm from './components/LoginForm';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\nimport { fetchPatients, savePatient, updatePatient, deletePatient, login, loadToken, logOut } from './actions';\nimport Navigation from '.components/Navigation';\nimport PatientsList from './components/PatientsList';\nimport './assets/fomantic/dist/semantic.css';\nimport { Container, Button } from 'semantic-ui-react';\n\nvar PrivateRoute = function PrivateRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      return rest.loggedIn ? React.createElement(Component, Object.assign({}, props, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })) : React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nexport var App = function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      initialized = _useState2[0],\n      setInitialized = _useState2[1]; // Effect to load a token if it exists in local storage on initial load\n  // It will run once on initial load, then once more when the loggedIn state\n  // changes to true.\n\n\n  useEffect(function () {\n    if (!initialized) {\n      var token = localStorage.getItem('token');\n\n      if (token && !props.token) {\n        props.loadToken(token);\n      }\n\n      setInitialized(true);\n    }\n  });\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/\",\n    component: Navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/login\",\n    render: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, props.loggedIn && React.createElement(Redirect, {\n        to: \"/patients\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Log In\"), React.createElement(LoginForm, {\n        onSubmit: props.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(PrivateRoute, {\n    path: \"/patients\",\n    component: PatientsList,\n    patients: props.patients,\n    fetchingPatients: props.fetchingPatients,\n    fetchPatients: props.fetchPatients,\n    savePatient: props.savePatient,\n    loggedIn: props.loggedIn,\n    deletePatient: props.deletePatient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: function render() {\n      return props.loggedIn ? React.createElement(Redirect, {\n        to: \"/patients\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }) : React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), props.loggedIn && React.createElement(Button, {\n    onClick: function onClick() {\n      localStorage.clear();\n      props.logOut();\n      props.history.push('/');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Log Out\"));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread({}, state.patients);\n};\n\nexport default withRouter(connect(mapStateToProps, {\n  fetchPatients: fetchPatients,\n  savePatient: savePatient,\n  updatePatient: updatePatient,\n  deletePatient: deletePatient,\n  login: login,\n  loadToken: loadToken,\n  logOut: logOut\n})(hot(App)));","map":{"version":3,"sources":["/Users/bryant/repositories/web20/build_weeks/build_2/notes/redux-vaccines/vaccines/src/App.js"],"names":["hot","React","Fragment","useEffect","useState","LoginForm","connect","Route","Redirect","withRouter","fetchPatients","savePatient","updatePatient","deletePatient","login","loadToken","logOut","Navigation","PatientsList","Container","Button","PrivateRoute","Component","component","rest","props","loggedIn","App","initialized","setInitialized","token","localStorage","getItem","patients","fetchingPatients","clear","history","push","mapStateToProps","state"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,uBAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,kBAA5C;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,MAPF,QAQO,WARP;AASA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,qCAAP;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAA4BC,IAA5B;;AAAA,SACnB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,IAAA,MAAM,EAAE,gBAAAC,KAAK;AAAA,aAC5BD,IAAI,CAACE,QAAL,GACE,oBAAC,SAAD,oBAAeD,KAAf,EAA0BD,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,GAGE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJ0B;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADmB;AAAA,CAArB;;AAUA,OAAO,IAAMG,GAAG,GAAG,SAANA,GAAM,CAAAF,KAAK,EAAI;AAAA,kBACYrB,QAAQ,CAAC,KAAD,CADpB;AAAA;AAAA,MACnBwB,WADmB;AAAA,MACNC,cADM,kBAG1B;AACA;AACA;;;AACA1B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACyB,WAAL,EAAkB;AAChB,UAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAGF,KAAK,IAAI,CAACL,KAAK,CAACK,KAAnB,EAA0B;AACxBL,QAAAA,KAAK,CAACV,SAAN,CAAgBe,KAAhB;AACD;;AACDD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GARQ,CAAT;AAUA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,GADP;AAEE,IAAA,SAAS,EAAEZ,UAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAKE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,MAAM,EAAE;AAAA,aACN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIQ,KAAK,CAACC,QAAN,IAAkB,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADtB,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAED,KAAK,CAACX,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADM;AAAA,KAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAeE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,WADP;AAEE,IAAA,SAAS,EAAEI,YAFb;AAGE,IAAA,QAAQ,EAAEO,KAAK,CAACQ,QAHlB;AAIE,IAAA,gBAAgB,EAAER,KAAK,CAACS,gBAJ1B;AAKE,IAAA,aAAa,EAAET,KAAK,CAACf,aALvB;AAME,IAAA,WAAW,EAAEe,KAAK,CAACd,WANrB;AAOE,IAAA,QAAQ,EAAEc,KAAK,CAACC,QAPlB;AAQE,IAAA,aAAa,EAAED,KAAK,CAACZ,aARvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,EAyBE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,GAFP;AAGE,IAAA,MAAM,EAAE;AAAA,aACNY,KAAK,CAACC,QAAN,GAAiB,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,GAA+C,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADzC;AAAA,KAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,EAgCID,KAAK,CAACC,QAAN,IAAkB,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,mBAAM;AACzCK,MAAAA,YAAY,CAACI,KAAb;AACAV,MAAAA,KAAK,CAACT,MAAN;AACAS,MAAAA,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,KAJmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhCtB,CADF;AAwCD,CAxDM;;AA2DP,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,2BACxBA,KAAK,CAACN,QADkB;AAAA,CAA7B;;AAIA,eAAexB,UAAU,CAACH,OAAO,CAC/BgC,eAD+B,EAE/B;AACE5B,EAAAA,aAAa,EAAbA,aADF;AAEEC,EAAAA,WAAW,EAAXA,WAFF;AAGEC,EAAAA,aAAa,EAAbA,aAHF;AAIEC,EAAAA,aAAa,EAAbA,aAJF;AAKEC,EAAAA,KAAK,EAALA,KALF;AAMEC,EAAAA,SAAS,EAATA,SANF;AAOEC,EAAAA,MAAM,EAANA;AAPF,CAF+B,CAAP,CAWxBhB,GAAG,CAAC2B,GAAD,CAXqB,CAAD,CAAzB","sourcesContent":["import { hot } from 'react-hot-loader/root';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport LoginForm from './components/LoginForm';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\nimport {\n  fetchPatients,\n  savePatient,\n  updatePatient,\n  deletePatient,\n  login,\n  loadToken,\n  logOut\n} from './actions';\nimport Navigation from '.components/Navigation'\nimport PatientsList from './components/PatientsList';\nimport './assets/fomantic/dist/semantic.css';\nimport { Container, Button } from 'semantic-ui-react';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    rest.loggedIn ? (\n      <Component {...props} {...rest} />\n    ) : (\n      <Redirect to=\"/login\" />\n    )\n  )} />\n);\n\nexport const App = props => {\n  const [initialized, setInitialized] = useState(false);\n\n  // Effect to load a token if it exists in local storage on initial load\n  // It will run once on initial load, then once more when the loggedIn state\n  // changes to true.\n  useEffect(() => {\n    if (!initialized) {\n      const token = localStorage.getItem('token');\n      if(token && !props.token) {\n        props.loadToken(token);\n      }\n      setInitialized(true);\n    }\n  });\n\n  return (\n    <Container>\n    <Route\n      path=\"/\"\n      component={Navigation}\n    />\n      <Route\n        path=\"/login\"\n        render={() => (\n          <Fragment>\n            { props.loggedIn && <Redirect to=\"/patients\" /> }\n            <h1>Log In</h1>\n            <LoginForm onSubmit={props.login} />\n          </Fragment>\n        )}\n      />\n      <PrivateRoute\n        path=\"/patients\"\n        component={PatientsList}\n        patients={props.patients}\n        fetchingPatients={props.fetchingPatients}\n        fetchPatients={props.fetchPatients}\n        savePatient={props.savePatient}\n        loggedIn={props.loggedIn}\n        deletePatient={props.deletePatient}\n      />\n      <Route\n        exact\n        path=\"/\"\n        render={() =>\n          props.loggedIn ? <Redirect to=\"/patients\" /> : <Redirect to=\"/login\" />\n        }\n      />\n      { props.loggedIn && <Button onClick={() => {\n        localStorage.clear();\n        props.logOut();\n        props.history.push('/');\n      }}>Log Out</Button> }\n    </Container>\n  );\n};\n\n\nconst mapStateToProps = state => ({\n  ...state.patients\n});\n\nexport default withRouter(connect(\n  mapStateToProps,\n  {\n    fetchPatients,\n    savePatient,\n    updatePatient,\n    deletePatient,\n    login,\n    loadToken,\n    logOut\n  }\n)(hot(App)));\n"]},"metadata":{},"sourceType":"module"}